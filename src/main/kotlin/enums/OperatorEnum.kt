package enums

import com.intellij.util.ArrayUtil

enum class OperatorEnum(val type : Array<DataFieldTypeEnum>, val key : String, val operator: Array<String>) {
    EQUAL(DataFieldTypeEnum.values(), 
            "=", 
            arrayOf("equal")),
    NOT_EQUAL(DataFieldTypeEnum.values(), 
            "!=", 
            arrayOf("notEqual")),
    LESS_THAN(arrayOf(DataFieldTypeEnum.INTEGER, DataFieldTypeEnum.DOUBLE), 
            "<", 
            arrayOf("lessThan")),
    LESS_THAN_OR_EQUAL(arrayOf(DataFieldTypeEnum.INTEGER, DataFieldTypeEnum.DOUBLE), 
            "<=", 
            arrayOf("lessOrEqual")),
    GREATER_THAN(arrayOf(DataFieldTypeEnum.INTEGER, DataFieldTypeEnum.DOUBLE), 
            ">",
            arrayOf("greaterThan")),
    GREATER_THAN_OR_EQUAL(arrayOf(DataFieldTypeEnum.INTEGER, DataFieldTypeEnum.DOUBLE), 
            ">=", 
            arrayOf("greaterOrEqual")),
    IS_MISSING(arrayOf(DataFieldTypeEnum.INTEGER, DataFieldTypeEnum.DOUBLE), 
            "null", 
            arrayOf("isMissing")),
    IS_NOT_MISSING(DataFieldTypeEnum.values(), 
            "not null", 
            arrayOf("isNotMissing")),
    IN(arrayOf(DataFieldTypeEnum.STRING), 
            "in", 
            arrayOf("equal", "equal")),
    NOT_IN(arrayOf(DataFieldTypeEnum.STRING),
            "not in", 
            arrayOf("notEqual", "notEqual")),
    OPEN_OPEN(arrayOf(DataFieldTypeEnum.INTEGER, DataFieldTypeEnum.DOUBLE),
            ">..<", 
            arrayOf("greaterThan", "lessThan")),
    CLOSED_OPEN(arrayOf(DataFieldTypeEnum.INTEGER, DataFieldTypeEnum.DOUBLE),
            ">=..<", 
            arrayOf("greaterThan", "lessThan")),
    OPEN_CLOSED(arrayOf(DataFieldTypeEnum.INTEGER, DataFieldTypeEnum.DOUBLE),
            ">..<=", 
            arrayOf("greaterThan", "lessThan")),
    CLOSED_CLOSED(arrayOf(DataFieldTypeEnum.INTEGER, DataFieldTypeEnum.DOUBLE),
            ">=..<=", 
            arrayOf("greaterThan", "lessThan"));
}